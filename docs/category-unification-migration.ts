/**
 * Migra√ß√£o para unificar categorias duplicadas via Supabase MCP
 * Este arquivo pode ser usado para executar a unifica√ß√£o diretamente no Supabase
 */

import { executeCategoryMigration } from '../lib/unify-categories';

/**
 * Executa a migra√ß√£o de unifica√ß√£o de categorias
 * @param projectId - ID do projeto Supabase
 * @param dryRun - Se true, apenas simula a opera√ß√£o
 */
export async function runCategoryUnificationMigration(
  projectId: string, 
  dryRun: boolean = true
) {
  console.log('üöÄ Iniciando migra√ß√£o de unifica√ß√£o de categorias...');
  console.log(`üì° Projeto: ${projectId}`);
  console.log(`üß™ Modo: ${dryRun ? 'SIMULA√á√ÉO' : 'EXECU√á√ÉO REAL'}`);
  
  try {
    const results = await executeCategoryMigration(projectId, dryRun);
    
    console.log('\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('üìä Resultados:');
    console.log(`  - Categorias unificadas: ${results.unified.length}`);
    console.log(`  - Categorias √≥rf√£s removidas: ${results.orphans.length}`);
    
    if (dryRun) {
      console.log('\nüí° Para executar de verdade, chame com dryRun: false');
    }
    
    return results;
    
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    throw error;
  }
}

/**
 * Script de exemplo para executar via Supabase MCP
 */
export const MIGRATION_EXAMPLE = `
// Exemplo de uso via Supabase MCP:

import { runCategoryUnificationMigration } from './docs/category-unification-migration';

// 1. Primeiro executar simula√ß√£o
await runCategoryUnificationMigration('seu-project-id', true);

// 2. Depois executar de verdade (se estiver satisfeito com a simula√ß√£o)
await runCategoryUnificationMigration('seu-project-id', false);
`;

/**
 * SQL equivalente para execu√ß√£o direta no Supabase
 * (caso prefira executar SQL diretamente)
 */
export const EQUIVALENT_SQL = `
-- Este SQL √© equivalente √† migra√ß√£o TypeScript
-- Execute apenas se n√£o puder usar o script TypeScript

-- 1. Primeiro, veja as duplicatas:
SELECT 
  LOWER(TRIM(name)) as normalized_name,
  COUNT(*) as category_count,
  STRING_AGG(name, ', ') as variations,
  STRING_AGG(id::text, ', ') as category_ids
FROM categories 
GROUP BY LOWER(TRIM(name))
HAVING COUNT(*) > 1
ORDER BY category_count DESC;

-- 2. Para executar a unifica√ß√£o, use o script completo em:
-- docs/unify-duplicate-categories.sql
`;

// Exportar fun√ß√£o principal para uso direto
export default runCategoryUnificationMigration;